\begin{lemma}
  \label{lem:match-is-not-simple}
  For any constraint context $\C\where{\square}$,
  the constraint $\C\where{\cmatch \t \cbrs}$ is not simple.
  \begin{proof}
    Structural induction on $\C$.
  \end{proof}
\end{lemma}


\begin{lemma}[Simple inversion]~
  \label{lem:simple-inversion}
  \begin{enumerate}[(\roman*)]
    \item If $\semenv \th \cunif \ta \tb$, then $\semenv(\ta) = \semenv(\tb)$.
    \item If $\semenv \th \ueq$, then $\semenv(\t) = \gt$ for all $\t \in \ueq$ and some ground type $\gt$.
    \item If $\semenv \th \capp \x \t$, then $\semenv(\t) \in \semenv(\x)$ or $\greg \tv \semenvp \in \semenv(\x)$ and $\semenvp(\tv) = \semenv(\t)$.
    \item If $\semenv \th \cpinst \inst \tv \t$, then $\semenv(\inst)(\tv) = \semenv(\t)$

    \item If $\semenv \th \ca \cand \cb$ and $\ca \cand \cb \simple$, then $\semenv \th \ca$ and $\semenv \th \cb$.
    \item If $\semenv \th \cexists \tv \c$ and $\cexists \tv \c \simple$, then $\semenv\where{\tv \is \gt} \th \c$ for some $\gt$.
    \item If $\semenv \th \cexistsi \inst \x \c$ and $\cexistsi \inst \x \c \simple$, then $\semenv\where{\inst \is \semenvp} \th \c$ for some $\semenvp$ such that $\greg \tv \semenvp \in \semenv(\x)$.
    \item If $\semenv \th \cfor \tv \c$ and $\cfor \tv \c \simple$, then $\semenv\where{\tv \is \gt} \th \c$ for all ground types $\gt$.
    \item If $\semenv \th \clet \x \tv \ca \cb$ and $\clet \x \tv \ca \cb \simple$, then $\semenv \th \cexists \tv \ca$ and \\$\semenv\where{\x \is \semenv(\cabs \tv \ca)} \th \cb$.
    \item If $\semenv \th \cletr \x \tv \tvs \ca \cb$ and $\cletr \x \tv \tvs \ca \cb \simple$, then
      $\semenv \th \cexists {\tv, \tvs} \ca$ and \\$\semenv\where{\x \is \semenv(\cabsr \tv \tvs \ca)} \th \cb$.
  \end{enumerate}
  \begin{proof}~
    \begin{enumerate}[(\roman*)]
      \item Case analysis on the given derivation $\semenv \th \cunif \ta \tb$.
There is a unique case for the atomic constraint $\cunif \ta \tb$:
\begin{proofcases}
    \proofcasederivation
      {Unif}
      {\semenv(\ta) = \semenv(\tb)}
      {\semenv \th \cunif \ta \tb}

    \begin{llproof}
\Hand  \eqPf{\semenv(\ta)}{\semenv(\tb)}  {Premise}
    \end{llproof}
\end{proofcases}

      \item Similar to \Rule{Unif} case.
      \item Similar to \Rule{Unif} case.
      \item Similar to \Rule{Unif} case.

      \item Case analysis on the given derivation $\semenv \th \ca \cand \cb$.
      \begin{proofcases}
\proofcasederivation
  {Conj}
  {\semenv \th \ca \\ \semenv \th \cb}
  {\semenv \th \ca \cand \cb}

\begin{llproof}
\Hand    \vdashPf{\semenv}{\ca} {Premise}
\Hand     \vdashPf{\semenv}{\cb} {Premise}
\end{llproof}

\proofcasederivation
  {Susp-Ctx}
  {\Cshape \C \t \sh \\ \semenv \th \C\where{\cmatched \t \sh \cbrs}}
  {\semenv \th \underbrace{\C\where{\cmatch \t \cbrs}}_{\ca \cand \cb}}

\begin{llproof}
  \simplePf{\C\where{\cmatch \t \cbrs}} {Given}
  \nsimplePf{\C\where{\cmatch \t \cbrs}} {By \cref{lem:match-is-not-simple}}
\Hand    \contraPf{\semenv \th \ca, \semenv \th \cb}
\end{llproof}

      \end{proofcases}

      \item Similar to \Rule{Conj} case.
      \item Similar to \Rule{Conj} case.
      \item Similar to \Rule{Conj} case.
      \item Similar to \Rule{Conj} case.
      \item Similar to \Rule{Conj} case.
    \end{enumerate}
  \end{proof}
\end{lemma}

\begin{lemma}[Composability of simplicity]
  \label{lem:compose-simple}
  If $\c \simple$ and $\C \simple$, then $\C\where\c \simple$.
  Additionally, if $\Ca \simple$ and $\Cb \simple$, then $\Ca\where\Cb \simple$.
  \begin{proof}
    Induction on the derivation of $\C \simple$ and $\Ca \simple$, respectively.
  \end{proof}
\end{lemma}

\begin{lemma}[Simple congruence]
  \label{lem:cong-simple}
  Given simple constraints $\ca, \cb$ and simple context $\C$.
  If \\$\ca \centails \cb$, then $\C\where{\ca} \centails \C\where{\cb}$.
  \begin{proof}
    Induction on the derivation of $\C \simple$.
  \end{proof}
\end{lemma}

\begin{lemma}[Erasure is simple]
  \label{lem:erase-simple}
  For all constraints $\c$, $\cerase \c \simple$.
  \begin{proof}
    Induction on the structure of $\c$.
  \end{proof}
\end{lemma}
